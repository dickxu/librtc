1. Building for different targets
==================================

1). only support building in Mac OSX

2). default by Release mode; if Debug set:
    $> export BUILD_TYPE=Debug

3). For ios platform
    #a. Building google webrtc
    $> sh build.sh ios webrtc

    #b. Building xrtc lib
    $> sh build.sh ios xrtc
    
    #c. Output library flags:
    header:  librtc/inc/xrtc_api.h
    libs:    librtc/lib/out_ios/Release-iphoneos/{libubase.a,librtc.a,libwebrtc_all.a}

4). Depended libs
    sqlite3, openssl,


2. How to call api from xrtc_api.h
==================================

//> setup one call
/**
 * xrtc_init():                 init default settings
 * xrtc_create():               create rtc center
 *                              call IRtcCenter::SetSink()
 *
 * GetUserMedia():              get local stream(audio/video track)
 * CreatePeerConnection():      create peer connection
 * AddLocalStream():            add local stream into peer connection
 * SetLocalRender(ADD):         add render to local stream
 *
 *
 * SetupCall():                         create offer
 * IRtcSink::OnSessionDescription():    call SetLocalDescription() of offer
 *                                      app=>Send sdp(offer) to remote peer
 * IRtcSink::OnIceCandidate:            app=>send candidate to remote peer
 *
 *
 * app=>Recv sdp(answer) from SIP:      call SetRemoteDescription() of answer
 * app=>Recv candidate from SIP:        call AddIceCandidate()
 * IRtcSink::OnRemotetream():           call SetRemoteRender(ADD)
 *
 */

//> receive one call
/**
 * xrtc_init():                 init default settings
 * xrtc_create():               create rtc center
 *                              call IRtcCenter::SetSink()
 *
 * GetUserMedia():              get local stream(audio/video track)
 * CreatePeerConnection():      create peer connection
 * AddLocalStream():            add local stream into peer connection
 * SetLocalRender(ADD):         add render to local stream
 *
 *
 * App=>Recv sdp(offer) from SIP:                
 * SetRemoteDescription():      with received offer.
 * AnswerCall():                        create answer
 * IRtcSink::OnSessionDescription():    call SetLocalDescription() of answer; 
 *                                      app=>Send sdp(answer) to remote peer over SIP.
 * IRtcSink::OnIceCandidate():          app=>Send candidate to remote peer over SIP.
 *
 *
 * app=>Recv candidate from SIP:        call AddIceCandidate(),
 * IRtcSink::OnRemoteStream(ADD):       call SetRemoteRender(ADD)
 *
 */

//> close one call
/**
 * IRtcCenter::Close(): 
 * SetLocalRender(REMOVE):
 * SetRemoteRender(REMOVE):
 * xrtc_destroy():
 * xrtc_uninit():
 *
 */
